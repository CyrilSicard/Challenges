*> THE SAMPLE CODE BELOW OUTPUTS WHAT IS READ ON STDIN
*> use DISPLAY "Hello stderr world" UPON SYSERR to output debugging information to stderr
IDENTIFICATION DIVISION.
PROGRAM-ID. APP.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.

    SELECT SYSIN ASSIGN TO KEYBOARD ORGANIZATION LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.

FD SYSIN.
01 ln PIC X(255).
    88 EOF VALUE HIGH-VALUES.
WORKING-STORAGE SECTION.

01 N-MONNAIES  PIC 9(02).
01 M-ECHANGES  PIC 9(02).

01 WS-CONVERTIONS-STR.
    05 WS-CONV-SRC-STR OCCURS 20 TIMES.
        10 WS-CONV-DST-STR OCCURS 20 TIMES.
            15 WS-CONV-VAL-STR  PIC 999V99 VALUE 0.

01 WS-TALLY     PIC 9(1) VALUE 0.
01 WS-TALLY-POS PIC 9(1) VALUE 0.
01 WS-TMP-CONV  PIC X(6) VALUE SPACE.
01 WS-TMP-CONV2.
    05 WS-TMP-CONV2-STR1 PIC XXX VALUE "000".
    05 WS-TMP-CONV2-STR2 PIC XX  VALUE "00".

01 WS-CONVERTIONS.
    05 WS-CONV-SRC OCCURS 20 TIMES.
        10 WS-CONV-DST OCCURS 20 TIMES.
            15 WS-CONV-VAL  PIC 999V99 VALUE 0.

01 WS-IDX   PIC 9(02) VALUE 1.
01 WS-IDX2   PIC 9(02) VALUE 1.
01 WS-IDX-MON-SRC   PIC 9(02) VALUE 1.
01 WS-IDX-MON-DST   PIC 9(02) VALUE 1.

01 WS-CACHE1.
    05 WS-C1-MON OCCURS 20 TIMES.
        10 WS-C1-VAL PIC 9(07)V9(03) VALUE 0.

01 WS-CACHE2.
    05 WS-C2-MON OCCURS 20 TIMES.
        10 WS-C2-VAL PIC 9(07)V9(03) VALUE 0.

01 WS-CALCULUS PIC 9(07)V9(03) VALUE 0.

PROCEDURE DIVISION.
    OPEN INPUT SYSIN
    READ SYSIN
      AT END SET EOF TO TRUE
    END-READ
    UNSTRING ln DELIMITED BY " " INTO
        N-MONNAIES
        M-ECHANGES
    END-UNSTRING
    DISPLAY "Nb monnaies  = " N-MONNAIES UPON SYSERR
    DISPLAY "Max échanges = " M-ECHANGES UPON SYSERR

    READ SYSIN
      AT END SET EOF TO TRUE
    END-READ
    PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL EOF
        UNSTRING ln DELIMITED BY " " INTO
            WS-CONV-DST-STR(WS-IDX, 1)
            WS-CONV-DST-STR(WS-IDX, 2)
            WS-CONV-DST-STR(WS-IDX, 3)
            WS-CONV-DST-STR(WS-IDX, 4)
            WS-CONV-DST-STR(WS-IDX, 5)
            WS-CONV-DST-STR(WS-IDX, 6)
            WS-CONV-DST-STR(WS-IDX, 7)
            WS-CONV-DST-STR(WS-IDX, 8)
            WS-CONV-DST-STR(WS-IDX, 9)
            WS-CONV-DST-STR(WS-IDX, 10)
            WS-CONV-DST-STR(WS-IDX, 11)
            WS-CONV-DST-STR(WS-IDX, 12)
            WS-CONV-DST-STR(WS-IDX, 13)
            WS-CONV-DST-STR(WS-IDX, 14)
            WS-CONV-DST-STR(WS-IDX, 15)
            WS-CONV-DST-STR(WS-IDX, 16)
            WS-CONV-DST-STR(WS-IDX, 17)
            WS-CONV-DST-STR(WS-IDX, 18)
            WS-CONV-DST-STR(WS-IDX, 19)
            WS-CONV-DST-STR(WS-IDX, 20)
        END-UNSTRING

        PERFORM VARYING WS-IDX2 FROM 1 BY 1 UNTIL WS-IDX2 > N-MONNAIES

            MOVE WS-CONV-DST-STR(WS-IDX, WS-IDX2) TO WS-TMP-CONV

            MOVE 0 TO WS-TALLY
            INSPECT WS-TMP-CONV
                TALLYING WS-TALLY FOR ALL
                    "0" BEFORE INITIAL "."
                    "1" BEFORE INITIAL "."
                    "2" BEFORE INITIAL "."
                    "3" BEFORE INITIAL "."
                    "4" BEFORE INITIAL "."
                    "5" BEFORE INITIAL "."
                    "6" BEFORE INITIAL "."
                    "7" BEFORE INITIAL "."
                    "8" BEFORE INITIAL "."
                    "9" BEFORE INITIAL "."

            IF WS-TALLY = 1 THEN
                MOVE ZEROS TO WS-TMP-CONV2-STR1(1:2)
                MOVE WS-TMP-CONV(1:1) TO WS-TMP-CONV2-STR1(3:1)
            END-IF
            IF WS-TALLY = 2 THEN
                MOVE ZEROS TO WS-TMP-CONV2-STR1(1:1)
                MOVE WS-TMP-CONV(1:2) TO WS-TMP-CONV2-STR1(2:2)
            END-IF
            IF WS-TALLY = 3 THEN
                MOVE WS-TMP-CONV TO WS-TMP-CONV2-STR1
            END-IF

            MOVE WS-TALLY TO WS-TALLY-POS
            ADD 2 TO WS-TALLY-POS

            MOVE 0 TO WS-TALLY
            INSPECT WS-TMP-CONV
                TALLYING WS-TALLY FOR ALL
                    "0" AFTER INITIAL "."
                    "1" AFTER INITIAL "."
                    "2" AFTER INITIAL "."
                    "3" AFTER INITIAL "."
                    "4" AFTER INITIAL "."
                    "5" AFTER INITIAL "."
                    "6" AFTER INITIAL "."
                    "7" AFTER INITIAL "."
                    "8" AFTER INITIAL "."
                    "9" AFTER INITIAL "."

            IF WS-TALLY = 0 THEN
                MOVE ZEROS TO WS-TMP-CONV2-STR2
            END-IF
            IF WS-TALLY = 1 THEN
                MOVE WS-TMP-CONV(WS-TALLY-POS:1) TO WS-TMP-CONV2-STR2(1:1)
                MOVE ZEROS TO WS-TMP-CONV2-STR2(2:1)
            END-IF
            IF WS-TALLY = 2 THEN
                MOVE WS-TMP-CONV(WS-TALLY-POS:2) TO WS-TMP-CONV2-STR2
            END-IF

            MOVE WS-TMP-CONV2 TO WS-CONV-VAL-STR(WS-IDX, WS-IDX2)

        END-PERFORM

        READ SYSIN
            AT END SET EOF TO TRUE
        END-READ
    END-PERFORM
    CLOSE SYSIN
    INSPECT WS-CONVERTIONS-STR REPLACING ALL " " BY "0"
    MOVE WS-CONVERTIONS-STR TO WS-CONVERTIONS
    MOVE 10000 TO WS-C1-VAL(1)

    PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL WS-IDX > M-ECHANGES

        PERFORM VARYING WS-IDX-MON-SRC FROM 1 BY 1 UNTIL WS-IDX-MON-SRC > N-MONNAIES

            PERFORM VARYING WS-IDX-MON-DST FROM 1 BY 1 UNTIL WS-IDX-MON-DST > N-MONNAIES

                MULTIPLY WS-C1-VAL(WS-IDX-MON-SRC) BY WS-CONV-VAL(WS-IDX-MON-SRC, WS-IDX-MON-DST) GIVING WS-CALCULUS ROUNDED

                IF WS-CALCULUS > WS-C2-VAL(WS-IDX-MON-DST) THEN
                    MOVE WS-CALCULUS TO WS-C2-VAL(WS-IDX-MON-DST)
                END-IF

            END-PERFORM

        END-PERFORM

        PERFORM VARYING WS-IDX-MON-DST FROM 1 BY 1 UNTIL WS-IDX-MON-DST > N-MONNAIES

            IF WS-C1-VAL(WS-IDX-MON-DST) < WS-C2-VAL(WS-IDX-MON-DST) THEN
                MOVE WS-C2-VAL(WS-IDX-MON-DST) TO WS-C1-VAL(WS-IDX-MON-DST)
            END-IF

        END-PERFORM

    END-PERFORM
    DISPLAY WS-C1-VAL(1)
    STOP RUN.
